#!/usr/bin/env python

"""a playground script where I try to sample from a hierarchical model with analytic probability models
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from jax import random

import numpyro
import numpyro.distributions as dist
from numpyro.infer import (MCMC, NUTS)

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

import corner

#-------------------------------------------------

### sample from a hierarchical model in which all the priors and distributions of parameters
### are modeled by analytic functions from numpyro.distributions

#------------------------

### DEFINE MODEL

def analytic_model(observed, event_index, num_events, num_obs, sigma_event=1.0):
    """a hierarchical model
    """
    # draw hyperparameters from hyperprior
    mu_pop = numpyro.sample("mu_pop", dist.Normal(0, 10))
    sigma_pop = numpyro.sample("sigma_pop", dist.Exponential(0.1))

    # draw single-event params from population model
    with numpyro.plate('event_mus', num_events): ### draws num_events samples for each param listed here
        mu = numpyro.sample('mu', dist.Normal(mu_pop, sigma_pop))
    mu = mu[index] ### take the means from the plate and put them in the right format to comare to observed
    sigma = sigma_event ### assume unit variance for event-level measurement error

    # now compare observed values to model of single-event priors

    # I'm not sure why one would use a "plate" here, but that's what was done in the tutorial
    # https://num.pyro.ai/en/latest/tutorials/bayesian_hierarchical_linear_regression.html
#    with numpyro.plate("data", num_events*num_obs):
#        numpyro.sample("obs", dist.Normal(mu, sigma), obs=observed)

    # this seems to work just as well without using a "plate"
    numpyro.sample("obs", dist.Normal(mu, sigma), obs=observed)

#------------------------

### SIMULATE DATA

true_mu_pop = 0.0
true_sigma_pop = 1.0

num_events = 10
true_mus = np.random.normal(true_mu_pop, true_sigma_pop, size=num_events)
true_sigma_event = 1.0

num_obs = 1000
obs = np.array([np.random.normal(mu, 1.0, size=num_obs) for mu in true_mus])
est = [np.mean(_) for _ in obs]    # point estimates for single-event params
est += [np.mean(est), np.std(est)] # point estimate for population params

sigma_est = true_sigma_event / num_obs**0.5 ### uncertainty for point estimate of single-event params

obs = np.ravel(obs)
index = np.ravel(np.array([np.ones(num_obs, dtype=int)*i for i in range(num_events)]))

#------------------------

### RUN SAMPLER

# instantiate key for random number generator
rng_key = random.PRNGKey(0)

# run NUTs sampler
num_samples = 10000
num_warmup = 1000

kernel = NUTS(analytic_model)
mcmc = MCMC(kernel, num_warmup=num_warmup, num_samples=num_samples)
mcmc.run(
    rng_key,
    obs,
    index,
    num_events,
    num_obs,
    sigma_event=true_sigma_event,
)
mcmc.print_summary()
samples = mcmc.get_samples()

#------------------------

### PLOT SAMPLES

data = []
truth = []
labels = []

for i in range(num_events):
    data.append(samples['mu'][:,i])
    truth.append(true_mus[i])
    labels.append('$\mu_%d$'%i)

data.append(samples['mu_pop'])
truth.append(true_mu_pop)
labels.append('$\mu_\mathrm{pop}$')

data.append(samples['sigma_pop'])
truth.append(true_sigma_pop)
labels.append('$\sigma_\mathrm{pop}$')

data = np.transpose(data) ### (num_samples, num_dim)

# plot the actual data
fig = corner.corner(
    data,
    truths=truth,
    labels=labels,
    hist_kwargs=dict(density=True),
)

# plot the estimates of single-event parameters
axes = fig.axes
num_dim = num_events + 2
for i in range(num_dim): ### only do this for single-event parameters
    ax = axes[(num_dim + 1)*i]
#    ax = plt.subplot(num_dim, num_dim, (num_dim + 1)*i + 1)

    ylim = ax.get_ylim()
    ax.plot([est[i]]*2, ylim, color='r')
    ax.set_ylim(ylim)

    if i < num_events: ### plot Gaussian distrib based on point estimate for single-event params
        xlim = ax.get_xlim()
        x = np.linspace(*xlim, 1001)
        ax.plot(x, np.exp(-0.5*(x-est[i])**2/sigma_est**2) / (2*np.pi*sigma_est**2)**0.5, color='r')
        ax.set_xlim(xlim)

figname = __file__+'.png'
print('saving : '+figname)
fig.savefig(figname)
plt.close(fig)
